#!/usr/bin/perl
use strict;
use warnings;

use DBI;
use DBD::Pg;
use Time::HiRes qw(time sleep);
use Data::Dumper;
use DateTime;

$| = 1;

my @Connect       = ("dbi:Pg:", '', '', {pg_enable_utf8 => 1, sslmode => 'require', RaiseError => 1, PrintError => 0, AutoCommit => 1});

my @LISTENConnect = ("dbi:Pg:", '', '', {pg_enable_utf8 => 1, sslmode => 'require', RaiseError => 1, PrintError => 0, AutoCommit => 1});
my $LISTENName = 'cron.Dispatch()';

sub SQL_Run {
    my $ProcessID = shift;
    die "Invalid ProcessID: $ProcessID" unless $ProcessID =~ m/^\d+$/;
    return "SELECT RunInSeconds FROM cron.Run(_ProcessID := $ProcessID)";
}

sub tprint {
    my $msg = shift;
    print DateTime->now(time_zone => 'local')->datetime() . ' ' . $msg . "\n";
}

my $Processes = {};

my $StartupTime = time();
my $DispatchDatabaseHandle = DBI->connect(@Connect) or die "Unable to connect";
my $ConnectTime = time() - $StartupTime;
my $Terminate_All_Backends = $DispatchDatabaseHandle->prepare('SELECT cron.Terminate_All_Backends()');
my $Reset_RunAtTime        = $DispatchDatabaseHandle->prepare('SELECT cron.Reset_RunAtTime()');
my $Dispatch               = $DispatchDatabaseHandle->prepare('SELECT RunProcessID, RunInSeconds, MaxProcesses, ConnectionPoolID FROM cron.Dispatch()');

unless ($DispatchDatabaseHandle->{pg_user} eq 'pgcronjob') {
    die "Not connected as the 'pgcronjob' database user!";
}

for (;;) {
    $Terminate_All_Backends->execute();
    my ($OK) = $Terminate_All_Backends->fetchrow_array();
    if ($OK == 1) {
        # all cron.Run() processes have now been terminated
        last;
    }
    tprint("Waiting for old cron processes to be terminated");
    sleep(1); # wait for processes to be terminated
}
$Reset_RunAtTime->execute();

my $LISTENDatabaseHandle = DBI->connect(@LISTENConnect) or die "Unable to connect LISTEN database handle";
$LISTENDatabaseHandle->do(qq{LISTEN "$LISTENName"}) or die "Unable to LISTEN: " . $LISTENDatabaseHandle->errstr;

tprint("PgCronJob is now running");

my $DispatchTime = time();
my $NumProcesses = {};

sub DumpState {
    tprint("ConnectTime: $ConnectTime\n"
        . "DispatchTime: $DispatchTime\n"
        . "NumProcesses:\n"
        . Dumper($NumProcesses)
        . "Processes:\n"
        . Dumper($Processes)
    );
}

$SIG{HUP} = \&DumpState;

while (1) {
    if (time() > $DispatchTime) {
        $Dispatch->execute();
        my ($RunProcessID, $RunInSeconds, $MaxProcesses, $ConnectionPoolID) = $Dispatch->fetchrow_array();
        if (defined $RunProcessID) {
            $Processes->{$RunProcessID} = {
                RunAtTime        => time() + $RunInSeconds,
                MaxProcesses     => $MaxProcesses,
                ConnectionPoolID => $ConnectionPoolID
            };
        } else {
            $DispatchTime = time()+1;
        }

    }
    foreach my $ProcessID (sort {$Processes->{$a}->{RunAtTime} <=> $Processes->{$b}->{RunAtTime}} keys %{$Processes}) {
        my $Process = $Processes->{$ProcessID};
        my $RunAtTime         = \$Process->{RunAtTime};
        my $RunASAP           = \$Process->{RunASAP};
        my $MaxProcesses      = \$Process->{MaxProcesses};
        my $ConnectionPoolID  = \$Process->{ConnectionPoolID};
        my $RunDatabaseHandle = \$Process->{DatabaseHandle};
        my $Run               = \$Process->{Run};
        if (defined $$ConnectionPoolID && !defined $NumProcesses->{$$ConnectionPoolID}) {
            $NumProcesses->{$$ConnectionPoolID} = 0;
        }
        if ($$RunAtTime > 0) {
            if ($$RunAtTime > time() || (defined $$MaxProcesses && $$MaxProcesses ne '' && $NumProcesses->{$$ConnectionPoolID} >= $$MaxProcesses)) {
                next;
            }
            unless (defined $$RunDatabaseHandle) {
                $$RunDatabaseHandle = DBI->connect(@Connect) or die "Unable to connect";
                $Process->{PgBackendPID} = ${$RunDatabaseHandle}->{pg_pid};
                $$Run = ${$RunDatabaseHandle}->prepare(SQL_Run($ProcessID), {pg_async => PG_ASYNC});
            }
            $$Run->execute();
            $$RunAtTime = 0;
            if (defined $$ConnectionPoolID) {
                $NumProcesses->{$$ConnectionPoolID}++;
            }
        } elsif ($$Run->pg_ready) {
            if (defined $$ConnectionPoolID) {
                $NumProcesses->{$$ConnectionPoolID}--;
            }
            my $Rows = $$Run->pg_result;
            die "Unexpected number of rows: $Rows" unless $Rows == 1;
            my ($RunInSeconds) = $$Run->fetchrow_array();
            if ($$Run->fetchrow_array()) {
                die "Unexpected extra row returned";
            }
            if (!defined $RunInSeconds || $RunInSeconds > $ConnectTime) {
                $$Run->finish;
                $$Run = undef;
                delete $Process->{Run};
                $$RunDatabaseHandle->disconnect;
                $$RunDatabaseHandle = undef;
                delete $Process->{DatabaseHandle};
                delete $Process->{PgBackendPID};
            }
            if (defined $RunInSeconds) {
                # We want to actually assign a time here in order to let
                # the main loop prioritize the tasks correctly.
                $$RunAtTime = time() + ($$RunASAP ? 0 : $RunInSeconds);
                $$RunASAP = undef;
            } else {
                delete $Processes->{$ProcessID};
            }
        }
    }
    while (my $NOTIFY = $LISTENDatabaseHandle->pg_notifies) {
        my ($NOTIFYName, $NOTIFYPID, $NOTIFYPayload) = @$NOTIFY;
        unless ($NOTIFYName eq $LISTENName && $NOTIFYPayload =~ m/^\d+$/) {
            die "Unexpected notification $NOTIFYName $NOTIFYPayload";
        }
        my $ProcessID = $NOTIFYPayload;
        if (!defined $Processes->{$ProcessID}) {
            # This could happen because notifications can be delayed
            # for an arbitrary amount of time.
            next;
        }
        if ($Processes->{$ProcessID}->{RunAtTime} > 0) {
            $Processes->{$ProcessID}->{RunAtTime} = time();
        } else {
            $Processes->{$ProcessID}->{RunASAP} = 1;
        }
    }
    sleep(0.001); # sleep 1 ms to avoid 100% CPU usage
}
