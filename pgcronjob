#!/usr/bin/perl
use strict;
# use warnings;

use DBI;
use DBD::Pg;
use Time::HiRes qw(time);
use Data::Dumper;
use DateTime;

$| = 1;

my @Connect       = ("dbi:Pg:", '', '', {pg_enable_utf8 => 1, sslmode => 'require', RaiseError => 1, PrintError => 0, AutoCommit => 1});

my @LISTENConnect = ("dbi:Pg:", '', '', {pg_enable_utf8 => 1, sslmode => 'require', RaiseError => 1, PrintError => 0, AutoCommit => 1});
my $LISTENName = 'cron.Dispatch()';

sub SQL_Run {
    my $ProcessID = shift;
    die "Invalid ProcessID: $ProcessID" unless $ProcessID =~ m/^\d+$/;
    return "SELECT RunInSeconds FROM cron.Run(_ProcessID := $ProcessID)";
}

my $Processes = {};

my $ConnectTime -= time;
my $DispatchDatabaseHandle = DBI->connect(@Connect) or die "Unable to connect";
$ConnectTime += time;
my $Restart    = $DispatchDatabaseHandle->prepare('SELECT cron.Restart()');
my $Dispatch   = $DispatchDatabaseHandle->prepare('SELECT RunProcessID, RunInSeconds, MaxProcesses FROM cron.Dispatch()');
my $vJobs      = $DispatchDatabaseHandle->prepare('SELECT * FROM cron.vJobs');
my $vProcesses = $DispatchDatabaseHandle->prepare('SELECT * FROM cron.vProcesses');
my $vLog       = $DispatchDatabaseHandle->prepare('SELECT * FROM cron.vLog');

my $LISTENDatabaseHandle = DBI->connect(@LISTENConnect) or die "Unable to connect LISTEN database handle";
$LISTENDatabaseHandle->do(qq{LISTEN "$LISTENName"}) or die "Unable to LISTEN: " . $LISTENDatabaseHandle->errstr;

$Restart->execute();

my $DispatchTime = time;
my $NumProcesses = 0;
while (1) {
    if (time > $DispatchTime) {
        $Dispatch->execute();
        my ($RunProcessID, $RunInSeconds, $MaxProcesses) = $Dispatch->fetchrow_array();
        print "NumProcesses: $NumProcesses RunProcessID: $RunProcessID RunInSeconds: $RunInSeconds MaxProcesses: $MaxProcesses\n";
        status();
        if (defined $RunProcessID) {
            $Processes->{$RunProcessID} = {
                RunAtTime    => time() + $RunInSeconds,
                MaxProcesses => $MaxProcesses
            };
        } else {
            $DispatchTime = time+1;
        }
    }
    foreach my $ProcessID (sort {$Processes->{$a}->{RunAtTime} <=> $Processes->{$b}->{RunAtTime}} keys %{$Processes}) {
        my $Process = $Processes->{$ProcessID};
        my $RunAtTime         = \$Process->{RunAtTime};
        my $RunASAP           = \$Process->{RunASAP};
        my $MaxProcesses      = \$Process->{MaxProcesses};
        my $RunDatabaseHandle = \$Process->{DatabaseHandle};
        my $Run               = \$Process->{Run};
        if ($$RunAtTime) {
            next if $$RunAtTime > time;
            next if defined $$MaxProcesses && $$MaxProcesses ne '' && $NumProcesses > $$MaxProcesses;
            unless (defined $$RunDatabaseHandle) {
                $$RunDatabaseHandle = DBI->connect(@Connect) or die "Unable to connect";
                $$Run = ${$RunDatabaseHandle}->prepare(SQL_Run($ProcessID), {pg_async => PG_ASYNC});
            }
            $$Run->execute();
            $$RunAtTime = 0;
            $NumProcesses++;
        } elsif ($$Run->pg_ready) {
            $NumProcesses--;
            my $Rows = $$Run->pg_result;
            die "Unexpected number of rows: $Rows" unless $Rows == 1;
            my ($RunInSeconds) = $$Run->fetchrow_array();
            if (!defined $RunInSeconds || $RunInSeconds > $ConnectTime) {
                $$Run->finish;
                $$Run = undef;
                delete $Process->{Run};
                $$RunDatabaseHandle->disconnect;
                $$RunDatabaseHandle = undef;
                delete $Process->{DatabaseHandle};
            }
            if (defined $RunInSeconds) {
                $$RunAtTime = time + ($$RunASAP ? 0 : $RunInSeconds);
                $$RunASAP = undef;
            } else {
                delete $Processes->{$ProcessID};
            }
        }
    }
    while (my $NOTIFY = $LISTENDatabaseHandle->pg_notifies) {
        my ($NOTIFYName, $NOTIFYPID, $NOTIFYPayload) = @$NOTIFY;
        next unless $NOTIFYName eq $LISTENName && $NOTIFYPayload =~ m/^\d+$/;
        my $ProcessID = $NOTIFYPayload;
        print "Received NOTIFY ProcessID: $ProcessID\n";
        if ($Processes->{$ProcessID}->{RunAtTime}) {
            $Processes->{$ProcessID}->{RunAtTime} = time;
        } else {
            $Processes->{$ProcessID}->{RunASAP} = 1;
        }
    }
}

sub status {
    use Term::ANSIColor;
    use Text::ASCIITable;
    use Term::ReadLine;
    system('clear');

    printf("ConnectTime: %.0f ms NumProcesses: %d Time: %s\n", $ConnectTime*1000, $NumProcesses, DateTime->now(time_zone => 'local'));

    my $JobsTable = Text::ASCIITable->new({headingText => 'cron.Jobs'});
    $JobsTable->setCols('JobID','Function','Processes','MaxProcesses','Concurrent','Enabled','RunIfWaiting','RetryOnError','RandomInterval','IntervalAGAIN','IntervalDONE','RunAfterTimestamp','RunUntilTimestamp','RunAfterTime','RunUntilTime','RequestedBy','RequestedAt');
    $vJobs->execute();
    my $ret = $vJobs->fetchall_arrayref();
    foreach my $r (@$ret) {
        $JobsTable->addRow($r);
    }
    print $JobsTable;

    my $StatusTable = Text::ASCIITable->new({headingText => 'cron.Status'});
    $StatusTable->setCols('JobID','Function','ProcessID','Status','Calls','BatchJobState','LastSQLSTATE','LastSQLERRM','PgBackendPID','procpid','waiting','current_query','duration','TotalDuration');
    $vProcesses->execute();
    my $ret = $vProcesses->fetchall_arrayref();
    foreach my $r (@$ret) {
        $StatusTable->addRow($r);
    }
    print $StatusTable;

    my $ProcessesTable = Text::ASCIITable->new({headingText => '$Processes'});
    $ProcessesTable->setCols('ProcessID','Status','RunInSeconds','RunASAP','MaxProcesses','DatabaseHandle');
    foreach my $ProcessID (sort {$a <=> $b} keys %{$Processes}) {
        my $P = $Processes->{$ProcessID};
        $ProcessesTable->addRow($ProcessID,$P->{RunAtTime} ? 'QUEUED' : 'RUNNING',$P->{RunAtTime} ? sprintf('%.2f',$P->{RunAtTime}-time()) : '',$P->{RunASAP},$P->{MaxProcesses},defined($P->{DatabaseHandle}) ? 'OPEN' : 'CLOSED');
    }
    print $ProcessesTable;

    my $LogTable = Text::ASCIITable->new({headingText => 'cron.Log'});
    $LogTable->setCols('LogID','JobID','BatchJobState','PgBackendPID','StartTxnAt','Duration','LastSQLSTATE','LastSQLERRM','seq_scan','seq_tup_read','idx_scan','idx_tup_fetch','n_tup_ins','n_tup_upd','n_tup_del');
    $vLog->execute();
    my $ret = $vLog->fetchall_arrayref();
    foreach my $r (@$ret) {
        $LogTable->addRow($r);
    }
    print $LogTable;

}
