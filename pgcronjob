#!/usr/bin/perl
use strict;
use warnings;

use DBI;
use DBD::Pg;
use Time::HiRes qw(time sleep);
use Data::Dumper;
use DateTime;

$| = 1;

my @Connect       = ("dbi:Pg:", '', '', {pg_enable_utf8 => 1, sslmode => 'require', RaiseError => 1, PrintError => 0, AutoCommit => 1});

my @LISTENConnect = ("dbi:Pg:", '', '', {pg_enable_utf8 => 1, sslmode => 'require', RaiseError => 1, PrintError => 0, AutoCommit => 1});
my $LISTENName = 'cron.Dispatch()';

sub SQL_Run {
    my $ProcessID = shift;
    die "Invalid ProcessID: $ProcessID" unless $ProcessID =~ m/^\d+$/;
    return "SELECT RunInSeconds FROM cron.Run(_ProcessID := $ProcessID)";
}

my $Processes = {};

my $ConnectTime -= time;
my $DispatchDatabaseHandle = DBI->connect(@Connect) or die "Unable to connect";
$ConnectTime += time;
my $Restart    = $DispatchDatabaseHandle->prepare('SELECT cron.Restart(_Force := ?)');
my $Dispatch   = $DispatchDatabaseHandle->prepare('SELECT RunProcessID, RunInSeconds, MaxProcesses, ConnectionPoolID FROM cron.Dispatch()');

my $LISTENDatabaseHandle = DBI->connect(@LISTENConnect) or die "Unable to connect LISTEN database handle";
$LISTENDatabaseHandle->do(qq{LISTEN "$LISTENName"}) or die "Unable to LISTEN: " . $LISTENDatabaseHandle->errstr;

my $Force = 0;
while (1) {
    $Restart->execute($Force);
    my ($OK) = $Restart->fetchrow_array();
    if ($OK) {
        # all cron.Run() processes have now been cancelled/terminated
        last;
    } else {
        print "Waiting for old cron processes to be " . ($Force ? 'terminated' : 'cancelled') . "\n";
        $Force = 1;
        sleep(1); # wait for processes to be cancelled/terminated
    }
}

print "PgCronJob is now running\n";

my $DispatchTime = time;
my $NumProcesses = {};

sub DumpState {
    print "ConnectTime: $ConnectTime\n";
    print "DispatchTime: $DispatchTime\n";
    print "NumProcesses:\n";
    print Dumper $NumProcesses;
    print "Processes:\n";
    print Dumper $Processes;
}

$SIG{HUP} = \&DumpState;

while (1) {
    if (time > $DispatchTime) {
        $Dispatch->execute();
        my ($RunProcessID, $RunInSeconds, $MaxProcesses, $ConnectionPoolID) = $Dispatch->fetchrow_array();
        if (defined $RunProcessID) {
            $Processes->{$RunProcessID} = {
                RunAtTime        => time() + $RunInSeconds,
                MaxProcesses     => $MaxProcesses,
                ConnectionPoolID => $ConnectionPoolID
            };
        } else {
            $DispatchTime = time+1;
        }
    }
    foreach my $ProcessID (sort {$Processes->{$a}->{RunAtTime} <=> $Processes->{$b}->{RunAtTime}} keys %{$Processes}) {
        my $Process = $Processes->{$ProcessID};
        my $RunAtTime         = \$Process->{RunAtTime};
        my $RunASAP           = \$Process->{RunASAP};
        my $MaxProcesses      = \$Process->{MaxProcesses};
        my $ConnectionPoolID  = \$Process->{ConnectionPoolID};
        my $RunDatabaseHandle = \$Process->{DatabaseHandle};
        my $Run               = \$Process->{Run};
        if (defined $$ConnectionPoolID && !defined $NumProcesses->{$$ConnectionPoolID}) {
            $NumProcesses->{$$ConnectionPoolID} = 0;
        }
        if ($$RunAtTime) {
            if ($$RunAtTime > time || (defined $$MaxProcesses && $$MaxProcesses ne '' && $NumProcesses->{$$ConnectionPoolID} >= $$MaxProcesses)) {
                next;
            }
            unless (defined $$RunDatabaseHandle) {
                $$RunDatabaseHandle = DBI->connect(@Connect) or die "Unable to connect";
                $$Run = ${$RunDatabaseHandle}->prepare(SQL_Run($ProcessID), {pg_async => PG_ASYNC});
            }
            $$Run->execute();
            $$RunAtTime = 0;
            if (defined $$ConnectionPoolID) {
                $NumProcesses->{$$ConnectionPoolID}++;
            }
        } elsif ($$Run->pg_ready) {
            if (defined $$ConnectionPoolID) {
                $NumProcesses->{$$ConnectionPoolID}--;
            }
            my $Rows = $$Run->pg_result;
            die "Unexpected number of rows: $Rows" unless $Rows == 1;
            my ($RunInSeconds) = $$Run->fetchrow_array();
            if (!defined $RunInSeconds || $RunInSeconds > $ConnectTime) {
                $$Run->finish;
                $$Run = undef;
                delete $Process->{Run};
                $$RunDatabaseHandle->disconnect;
                $$RunDatabaseHandle = undef;
                delete $Process->{DatabaseHandle};
            }
            if (defined $RunInSeconds) {
                $$RunAtTime = time + ($$RunASAP ? 0 : $RunInSeconds);
                $$RunASAP = undef;
            } else {
                delete $Processes->{$ProcessID};
            }
        }
    }
    while (my $NOTIFY = $LISTENDatabaseHandle->pg_notifies) {
        my ($NOTIFYName, $NOTIFYPID, $NOTIFYPayload) = @$NOTIFY;
        next unless $NOTIFYName eq $LISTENName && $NOTIFYPayload =~ m/^\d+$/;
        my $ProcessID = $NOTIFYPayload;
        if ($Processes->{$ProcessID}->{RunAtTime}) {
            $Processes->{$ProcessID}->{RunAtTime} = time;
        } else {
            $Processes->{$ProcessID}->{RunASAP} = 1;
        }
    }
    sleep(0.001); # sleep 1 ms to avoid 100% CPU usage
}
